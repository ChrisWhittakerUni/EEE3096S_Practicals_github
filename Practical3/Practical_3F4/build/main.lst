ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB136:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** //TODO: Define variables you think you might need
  46:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  47:Core/Src/main.c **** //TODO: Define variables you think you might need
  48:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  49:Core/Src/main.c **** #define MAX_ITER 100
  50:Core/Src/main.c **** int imag_dim;
  51:Core/Src/main.c **** uint64_t checksum;
  52:Core/Src/main.c **** int test_values[] = {128, 160, 192, 224, 256};
  53:Core/Src/main.c **** int imag_dim_arr[5];
  54:Core/Src/main.c **** uint64_t time_elapsed_arr[5];
  55:Core/Src/main.c **** uint64_t clock_cycles_arr[5];
  56:Core/Src/main.c **** int throughput_arr[5];
  57:Core/Src/main.c **** uint64_t checksum_arr[5];
  58:Core/Src/main.c **** uint64_t start_time;
  59:Core/Src/main.c **** uint64_t end_time;
  60:Core/Src/main.c **** uint64_t time_elapsed;
  61:Core/Src/main.c **** uint64_t cpu_freq;
  62:Core/Src/main.c **** uint64_t clock_cycles;
  63:Core/Src/main.c **** int height;
  64:Core/Src/main.c **** int width;
  65:Core/Src/main.c **** uint64_t num_pixels;
  66:Core/Src/main.c **** uint64_t throughput;
  67:Core/Src/main.c **** int place=0;
  68:Core/Src/main.c **** /* USER CODE END PV */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  71:Core/Src/main.c **** void SystemClock_Config(void);
  72:Core/Src/main.c **** static void MX_GPIO_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
  75:Core/Src/main.c **** // function declarations
  76:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  77:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  78:Core/Src/main.c **** /* USER CODE END PFP */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  81:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE END 0 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /**
  86:Core/Src/main.c ****   * @brief  The application entry point.
  87:Core/Src/main.c ****   * @retval int
  88:Core/Src/main.c ****   */
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 3


  89:Core/Src/main.c **** int main(void)
  90:Core/Src/main.c **** {
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END 1 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Core/Src/main.c ****   HAL_Init();
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE END Init */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Configure the system clock */
 106:Core/Src/main.c ****   SystemClock_Config();
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE END SysInit */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Initialize all configured peripherals */
 113:Core/Src/main.c ****   MX_GPIO_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   // retrieve frequency for calculating clock cycles later
 117:Core/Src/main.c ****     cpu_freq = HAL_RCC_GetHCLKFreq();
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****     // loop to make testing easier
 120:Core/Src/main.c ****      for(int i=0; i<5; i++){
 121:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 122:Core/Src/main.c ****    	  GPIOB->ODR = 0b00000001;
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****    	 //TODO: Call the Mandelbrot Function and store the output in the checksum variable defined ini
 125:Core/Src/main.c ****    	  imag_dim = test_values[i];
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****    		 //TODO: Record the start time
 128:Core/Src/main.c ****    		  start_time = HAL_GetTick();
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****    		  // set height and width
 131:Core/Src/main.c ****    		  height = imag_dim;
 132:Core/Src/main.c ****    		  width = imag_dim;
 133:Core/Src/main.c ****    		 //checksum = calculate_mandelbrot_double(imag_dim, imag_dim, MAX_ITER);
 134:Core/Src/main.c ****    		  checksum = calculate_mandelbrot_fixed_point_arithmetic(imag_dim, imag_dim, MAX_ITER);
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****    		 //TODO: Record the end time
 137:Core/Src/main.c ****    		  end_time = HAL_GetTick();
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****    		  //TODO: Calculate the execution time
 140:Core/Src/main.c ****    		  time_elapsed = end_time - start_time;
 141:Core/Src/main.c ****             //calculate number of clock cycles
 142:Core/Src/main.c ****    		  clock_cycles = (time_elapsed*cpu_freq)/1000;
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****    		  // calculate the throughput
 145:Core/Src/main.c ****    		  num_pixels = height*width;
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 4


 146:Core/Src/main.c ****    		  throughput = num_pixels/(time_elapsed/1000);
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****    		 imag_dim_arr[place] = imag_dim;
 149:Core/Src/main.c ****    		 time_elapsed_arr[place] = time_elapsed;
 150:Core/Src/main.c ****    	     clock_cycles_arr[place] = clock_cycles;
 151:Core/Src/main.c ****    		 throughput_arr[place] = throughput;
 152:Core/Src/main.c ****    		 checksum_arr[place] = checksum;
 153:Core/Src/main.c ****    		 // increment the index for all output arrays
 154:Core/Src/main.c ****    		 place+=1;
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****    		  //TODO: Turn on LED 1 to signify the end of the operation
 157:Core/Src/main.c ****    		  GPIOB->ODR = 0b00000011;
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****    		  //TODO: Hold the LEDs on for a 1s delay
 160:Core/Src/main.c ****    		  delay(1000);
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****    	  //TODO: Turn off the LEDs
 165:Core/Src/main.c ****    	  GPIOB->ODR = 0b00000000;
 166:Core/Src/main.c ****      }
 167:Core/Src/main.c ****   /* Infinite loop */
 168:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 169:Core/Src/main.c ****   while (1)
 170:Core/Src/main.c ****   {
 171:Core/Src/main.c ****     /* USER CODE END WHILE */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 174:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** 	  //TODO: Benchmark and Profile Performance
 178:Core/Src/main.c **** 
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED1 to signal processing start
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 	  //TODO: Keep the LEDs ON for 2s
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** 	  //TODO: Turn OFF LEDs
 186:Core/Src/main.c ****   }
 187:Core/Src/main.c ****   /* USER CODE END 3 */
 188:Core/Src/main.c **** }
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** /**
 191:Core/Src/main.c ****   * @brief System Clock Configuration
 192:Core/Src/main.c ****   * @retval None
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c **** void SystemClock_Config(void)
 195:Core/Src/main.c **** {
 196:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 197:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 200:Core/Src/main.c ****   */
 201:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 202:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 205:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 206:Core/Src/main.c ****   */
 207:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 208:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 216:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 217:Core/Src/main.c ****   {
 218:Core/Src/main.c ****     Error_Handler();
 219:Core/Src/main.c ****   }
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 224:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 231:Core/Src/main.c ****   {
 232:Core/Src/main.c ****     Error_Handler();
 233:Core/Src/main.c ****   }
 234:Core/Src/main.c **** }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** /**
 237:Core/Src/main.c ****   * @brief GPIO Initialization Function
 238:Core/Src/main.c ****   * @param None
 239:Core/Src/main.c ****   * @retval None
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c **** static void MX_GPIO_Init(void)
 242:Core/Src/main.c **** {
  28              		.loc 1 242 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 243:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 243 3 view .LVU1
  42              		.loc 1 243 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 6


  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 244:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 249:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 249 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 249 3 view .LVU4
  52 0010 0094     		str	r4, [sp]
  53              		.loc 1 249 3 view .LVU5
  54 0012 184B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 249 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0092     		str	r2, [sp]
  62              		.loc 1 249 3 view .LVU7
  63 0024 009A     		ldr	r2, [sp]
  64              	.LBE4:
  65              		.loc 1 249 3 view .LVU8
 250:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 250 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 250 3 view .LVU10
  69 0026 0194     		str	r4, [sp, #4]
  70              		.loc 1 250 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 250 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0192     		str	r2, [sp, #4]
  78              		.loc 1 250 3 view .LVU13
  79 0038 019A     		ldr	r2, [sp, #4]
  80              	.LBE5:
  81              		.loc 1 250 3 view .LVU14
 251:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 251 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 251 3 view .LVU16
  85 003a 0294     		str	r4, [sp, #8]
  86              		.loc 1 251 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00202 		orr	r2, r2, #2
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 251 3 view .LVU18
  91 0044 1B6B     		ldr	r3, [r3, #48]
  92 0046 03F00203 		and	r3, r3, #2
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 7


  93 004a 0293     		str	r3, [sp, #8]
  94              		.loc 1 251 3 view .LVU19
  95 004c 029B     		ldr	r3, [sp, #8]
  96              	.LBE6:
  97              		.loc 1 251 3 view .LVU20
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 254:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  98              		.loc 1 254 3 view .LVU21
  99 004e 0A4D     		ldr	r5, .L3+4
 100 0050 2246     		mov	r2, r4
 101 0052 FF21     		movs	r1, #255
 102 0054 2846     		mov	r0, r5
 103 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL0:
 255:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 258:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 259:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 105              		.loc 1 259 3 view .LVU22
 106              		.loc 1 259 23 is_stmt 0 view .LVU23
 107 005a FF23     		movs	r3, #255
 108 005c 0393     		str	r3, [sp, #12]
 260:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 261:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 109              		.loc 1 261 3 is_stmt 1 view .LVU24
 110              		.loc 1 261 24 is_stmt 0 view .LVU25
 111 005e 0123     		movs	r3, #1
 112 0060 0493     		str	r3, [sp, #16]
 262:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 262 3 is_stmt 1 view .LVU26
 114              		.loc 1 262 24 is_stmt 0 view .LVU27
 115 0062 0594     		str	r4, [sp, #20]
 263:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 116              		.loc 1 263 3 is_stmt 1 view .LVU28
 117              		.loc 1 263 25 is_stmt 0 view .LVU29
 118 0064 0694     		str	r4, [sp, #24]
 264:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 119              		.loc 1 264 3 is_stmt 1 view .LVU30
 120 0066 03A9     		add	r1, sp, #12
 121 0068 2846     		mov	r0, r5
 122 006a FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL1:
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 269:Core/Src/main.c **** }
 124              		.loc 1 269 1 is_stmt 0 view .LVU31
 125 006e 09B0     		add	sp, sp, #36
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0070 30BD     		pop	{r4, r5, pc}
 130              	.L4:
 131 0072 00BF     		.align	2
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 8


 132              	.L3:
 133 0074 00380240 		.word	1073887232
 134 0078 00040240 		.word	1073873920
 135              		.cfi_endproc
 136              	.LFE136:
 138              		.global	__aeabi_i2d
 139              		.global	__aeabi_ddiv
 140              		.global	__aeabi_d2lz
 141              		.global	__aeabi_ldivmod
 142              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 143              		.align	1
 144              		.global	calculate_mandelbrot_fixed_point_arithmetic
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 149              	calculate_mandelbrot_fixed_point_arithmetic:
 150              	.LVL2:
 151              	.LFB137:
 270:Core/Src/main.c **** 
 271:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 272:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 273:Core/Src/main.c **** //TODO: Mandelbroat using variable type integers and fixed point arithmetic
 274:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
 152              		.loc 1 274 96 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 72
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		.loc 1 274 96 is_stmt 0 view .LVU33
 157 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 158              	.LCFI3:
 159              		.cfi_def_cfa_offset 36
 160              		.cfi_offset 4, -36
 161              		.cfi_offset 5, -32
 162              		.cfi_offset 6, -28
 163              		.cfi_offset 7, -24
 164              		.cfi_offset 8, -20
 165              		.cfi_offset 9, -16
 166              		.cfi_offset 10, -12
 167              		.cfi_offset 11, -8
 168              		.cfi_offset 14, -4
 169 0004 93B0     		sub	sp, sp, #76
 170              	.LCFI4:
 171              		.cfi_def_cfa_offset 112
 172 0006 0446     		mov	r4, r0
 173 0008 0E90     		str	r0, [sp, #56]
 174 000a 0D46     		mov	r5, r1
 175 000c 0392     		str	r2, [sp, #12]
 275:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
 176              		.loc 1 275 3 is_stmt 1 view .LVU34
 177              	.LVL3:
 276:Core/Src/main.c ****   //TODO: Complete the function implementation
 277:Core/Src/main.c ****   int64_t x_0;
 178              		.loc 1 277 3 view .LVU35
 278:Core/Src/main.c ****   int64_t y_0;
 179              		.loc 1 278 3 view .LVU36
 279:Core/Src/main.c ****   int64_t x_i;
 180              		.loc 1 279 3 view .LVU37
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 9


 280:Core/Src/main.c ****   int64_t y_i;
 181              		.loc 1 280 3 view .LVU38
 281:Core/Src/main.c ****   int64_t iteration;
 182              		.loc 1 281 3 view .LVU39
 282:Core/Src/main.c ****   int64_t temp;
 183              		.loc 1 282 3 view .LVU40
 283:Core/Src/main.c ****   int64_t h_adj = 2000000.0/height;
 184              		.loc 1 283 3 view .LVU41
 185              		.loc 1 283 28 is_stmt 0 view .LVU42
 186 000e 0846     		mov	r0, r1
 187              	.LVL4:
 188              		.loc 1 283 28 view .LVU43
 189 0010 FFF7FEFF 		bl	__aeabi_i2d
 190              	.LVL5:
 191              		.loc 1 283 28 view .LVU44
 192 0014 0246     		mov	r2, r0
 193 0016 0B46     		mov	r3, r1
 194 0018 64A1     		adr	r1, .L16+20
 195 001a D1E90001 		ldrd	r0, [r1]
 196 001e FFF7FEFF 		bl	__aeabi_ddiv
 197              	.LVL6:
 198              		.loc 1 283 11 view .LVU45
 199 0022 FFF7FEFF 		bl	__aeabi_d2lz
 200              	.LVL7:
 201 0026 8246     		mov	r10, r0
 202 0028 0F91     		str	r1, [sp, #60]
 203              	.LVL8:
 284:Core/Src/main.c ****   int64_t w_adj = 3500000.0/width;
 204              		.loc 1 284 3 is_stmt 1 view .LVU46
 205              		.loc 1 284 28 is_stmt 0 view .LVU47
 206 002a 2046     		mov	r0, r4
 207              	.LVL9:
 208              		.loc 1 284 28 view .LVU48
 209 002c FFF7FEFF 		bl	__aeabi_i2d
 210              	.LVL10:
 211              		.loc 1 284 28 view .LVU49
 212 0030 0246     		mov	r2, r0
 213 0032 0B46     		mov	r3, r1
 214 0034 5FA1     		adr	r1, .L16+28
 215 0036 D1E90001 		ldrd	r0, [r1]
 216 003a FFF7FEFF 		bl	__aeabi_ddiv
 217              	.LVL11:
 218              		.loc 1 284 11 view .LVU50
 219 003e FFF7FEFF 		bl	__aeabi_d2lz
 220              	.LVL12:
 221 0042 0246     		mov	r2, r0
 222 0044 1091     		str	r1, [sp, #64]
 223              	.LVL13:
 285:Core/Src/main.c ****   for(int y=0; y<height; y++){
 224              		.loc 1 285 3 is_stmt 1 view .LVU51
 225              	.LBB7:
 226              		.loc 1 285 7 view .LVU52
 227              		.loc 1 285 11 is_stmt 0 view .LVU53
 228 0046 0023     		movs	r3, #0
 229              	.LBE7:
 275:Core/Src/main.c ****   //TODO: Complete the function implementation
 230              		.loc 1 275 12 view .LVU54
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 10


 231 0048 0893     		str	r3, [sp, #32]
 232 004a 9C46     		mov	ip, r3
 233 004c 1195     		str	r5, [sp, #68]
 234              	.LBB10:
 235              		.loc 1 285 3 view .LVU55
 236 004e 94E0     		b	.L6
 237              	.LVL14:
 238              	.L9:
 239              	.LBB8:
 286:Core/Src/main.c **** 	  for(int x=0; x<width; x++){
 287:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 288:Core/Src/main.c **** 		  y_0 = (y*h_adj) - (1000000);
 289:Core/Src/main.c **** 		  x_i = 0;
 290:Core/Src/main.c **** 		  y_i = 0;
 291:Core/Src/main.c **** 		  iteration = 0;
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** 		  while((iteration < max_iterations) && (((x_i*x_i+y_i*y_i)/1000000) <= 4000000)){
 294:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 240              		.loc 1 294 6 is_stmt 1 view .LVU56
 241              		.loc 1 294 23 is_stmt 0 view .LVU57
 242 0050 514A     		ldr	r2, .L16
 243 0052 0023     		movs	r3, #0
 244 0054 FFF7FEFF 		bl	__aeabi_ldivmod
 245              	.LVL15:
 246 0058 8846     		mov	r8, r1
 247 005a 0746     		mov	r7, r0
 248              		.loc 1 294 43 view .LVU58
 249 005c 4F4A     		ldr	r2, .L16+4
 250 005e 4FF0FF33 		mov	r3, #-1
 251 0062 5846     		mov	r0, fp
 252 0064 5146     		mov	r1, r10
 253 0066 FFF7FEFF 		bl	__aeabi_ldivmod
 254              	.LVL16:
 255              		.loc 1 294 32 view .LVU59
 256 006a 3F18     		adds	r7, r7, r0
 257 006c 48EB0108 		adc	r8, r8, r1
 258              		.loc 1 294 11 view .LVU60
 259 0070 049B     		ldr	r3, [sp, #16]
 260 0072 FF18     		adds	r7, r7, r3
 261 0074 059B     		ldr	r3, [sp, #20]
 262 0076 48EB0308 		adc	r8, r8, r3
 263              	.LVL17:
 295:Core/Src/main.c **** 			  y_i = ((2*x_i*y_i)/1000000) + y_0;
 264              		.loc 1 295 6 is_stmt 1 view .LVU61
 265              		.loc 1 295 19 is_stmt 0 view .LVU62
 266 007a 05FB06F6 		mul	r6, r5, r6
 267              	.LVL18:
 268              		.loc 1 295 19 view .LVU63
 269 007e 029B     		ldr	r3, [sp, #8]
 270 0080 04FB0366 		mla	r6, r4, r3, r6
 271 0084 A5FB0401 		umull	r0, r1, r5, r4
 272              		.loc 1 295 24 view .LVU64
 273 0088 454A     		ldr	r2, .L16+8
 274 008a 0023     		movs	r3, #0
 275 008c 3144     		add	r1, r1, r6
 276 008e FFF7FEFF 		bl	__aeabi_ldivmod
 277              	.LVL19:
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 11


 278              		.loc 1 295 10 view .LVU65
 279 0092 069B     		ldr	r3, [sp, #24]
 280 0094 1C18     		adds	r4, r3, r0
 281              		.loc 1 295 10 view .LVU66
 282 0096 079B     		ldr	r3, [sp, #28]
 283 0098 43EB0106 		adc	r6, r3, r1
 284              	.LVL20:
 296:Core/Src/main.c **** 			  x_i = temp;
 285              		.loc 1 296 6 is_stmt 1 view .LVU67
 297:Core/Src/main.c **** 			  iteration += 1;
 286              		.loc 1 297 6 view .LVU68
 287              		.loc 1 297 16 is_stmt 0 view .LVU69
 288 009c 019B     		ldr	r3, [sp, #4]
 289 009e 0133     		adds	r3, r3, #1
 290 00a0 0193     		str	r3, [sp, #4]
 291              	.LVL21:
 292              		.loc 1 297 16 view .LVU70
 293 00a2 49F10009 		adc	r9, r9, #0
 294              	.LVL22:
 296:Core/Src/main.c **** 			  x_i = temp;
 295              		.loc 1 296 10 view .LVU71
 296 00a6 3D46     		mov	r5, r7
 297 00a8 CDF80880 		str	r8, [sp, #8]
 298              	.LVL23:
 299              	.L7:
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 300              		.loc 1 293 40 is_stmt 1 view .LVU72
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 301              		.loc 1 293 22 is_stmt 0 view .LVU73
 302 00ac 039A     		ldr	r2, [sp, #12]
 303 00ae D317     		asrs	r3, r2, #31
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 304              		.loc 1 293 40 view .LVU74
 305 00b0 0199     		ldr	r1, [sp, #4]
 306 00b2 9142     		cmp	r1, r2
 307 00b4 79EB0303 		sbcs	r3, r9, r3
 308 00b8 16DA     		bge	.L8
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 309              		.loc 1 293 49 discriminator 1 view .LVU75
 310 00ba 029B     		ldr	r3, [sp, #8]
 311 00bc 05FB03F3 		mul	r3, r5, r3
 312 00c0 A5FB0501 		umull	r0, r1, r5, r5
 313 00c4 01EB4301 		add	r1, r1, r3, lsl #1
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 314              		.loc 1 293 57 discriminator 1 view .LVU76
 315 00c8 04FB06F3 		mul	r3, r4, r6
 316 00cc A4FB04BA 		umull	fp, r10, r4, r4
 317 00d0 0AEB430A 		add	r10, r10, r3, lsl #1
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 318              		.loc 1 293 53 discriminator 1 view .LVU77
 319 00d4 10EB0B03 		adds	r3, r0, fp
 320 00d8 41EB0A02 		adc	r2, r1, r10
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 321              		.loc 1 293 40 discriminator 1 view .LVU78
 322 00dc 314F     		ldr	r7, .L16+12
 323 00de 9F42     		cmp	r7, r3
 324 00e0 40F2A333 		movw	r3, #931
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 12


 325 00e4 9341     		sbcs	r3, r3, r2
 326 00e6 B3DA     		bge	.L9
 327              	.L8:
 298:Core/Src/main.c **** 		  }
 299:Core/Src/main.c **** 		  mandelbrot_sum += iteration;
 328              		.loc 1 299 20 view .LVU79
 329 00e8 DDF824B0 		ldr	fp, [sp, #36]
 330 00ec DDF828A0 		ldr	r10, [sp, #40]
 331 00f0 0B9B     		ldr	r3, [sp, #44]
 332 00f2 DDF83080 		ldr	r8, [sp, #48]
 333 00f6 DDF834C0 		ldr	ip, [sp, #52]
 334              		.loc 1 299 5 is_stmt 1 view .LVU80
 335              		.loc 1 299 20 is_stmt 0 view .LVU81
 336 00fa 019A     		ldr	r2, [sp, #4]
 337 00fc 0899     		ldr	r1, [sp, #32]
 338 00fe 5218     		adds	r2, r2, r1
 339 0100 0892     		str	r2, [sp, #32]
 340              	.LVL24:
 341              		.loc 1 299 20 view .LVU82
 342 0102 49EB0C0C 		adc	ip, r9, ip
 343              	.LVL25:
 286:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 344              		.loc 1 286 27 is_stmt 1 discriminator 2 view .LVU83
 345 0106 0AF1010A 		add	r10, r10, #1
 346              	.LVL26:
 347              	.L11:
 286:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 348              		.loc 1 286 18 discriminator 1 view .LVU84
 349 010a 0E9A     		ldr	r2, [sp, #56]
 350 010c 9245     		cmp	r10, r2
 351 010e 30DA     		bge	.L14
 287:Core/Src/main.c **** 		  y_0 = (y*h_adj) - (1000000);
 352              		.loc 1 287 5 view .LVU85
 287:Core/Src/main.c **** 		  y_0 = (y*h_adj) - (1000000);
 353              		.loc 1 287 13 is_stmt 0 view .LVU86
 354 0110 4FEAEA72 		asr	r2, r10, #31
 355 0114 1099     		ldr	r1, [sp, #64]
 356 0116 0AFB01F1 		mul	r1, r10, r1
 357 011a 08FB0211 		mla	r1, r8, r2, r1
 358 011e AAFB0802 		umull	r0, r2, r10, r8
 359 0122 1144     		add	r1, r1, r2
 287:Core/Src/main.c **** 		  y_0 = (y*h_adj) - (1000000);
 360              		.loc 1 287 9 view .LVU87
 361 0124 204A     		ldr	r2, .L16+16
 362 0126 8218     		adds	r2, r0, r2
 363 0128 0492     		str	r2, [sp, #16]
 364 012a 61F10002 		sbc	r2, r1, #0
 365 012e 0592     		str	r2, [sp, #20]
 366              	.LVL27:
 288:Core/Src/main.c **** 		  x_i = 0;
 367              		.loc 1 288 5 is_stmt 1 view .LVU88
 288:Core/Src/main.c **** 		  x_i = 0;
 368              		.loc 1 288 13 is_stmt 0 view .LVU89
 369 0130 4FEAEB72 		asr	r2, fp, #31
 370              	.LVL28:
 288:Core/Src/main.c **** 		  x_i = 0;
 371              		.loc 1 288 13 view .LVU90
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 13


 372 0134 0F99     		ldr	r1, [sp, #60]
 373 0136 0BFB01F1 		mul	r1, fp, r1
 374 013a 03FB0211 		mla	r1, r3, r2, r1
 375 013e ABFB0302 		umull	r0, r2, fp, r3
 376 0142 1144     		add	r1, r1, r2
 288:Core/Src/main.c **** 		  x_i = 0;
 377              		.loc 1 288 9 view .LVU91
 378 0144 154A     		ldr	r2, .L16+4
 379 0146 8218     		adds	r2, r0, r2
 380 0148 0692     		str	r2, [sp, #24]
 381 014a 61F10002 		sbc	r2, r1, #0
 382 014e 0792     		str	r2, [sp, #28]
 383              	.LVL29:
 289:Core/Src/main.c **** 		  y_i = 0;
 384              		.loc 1 289 5 is_stmt 1 view .LVU92
 290:Core/Src/main.c **** 		  iteration = 0;
 385              		.loc 1 290 5 view .LVU93
 291:Core/Src/main.c **** 
 386              		.loc 1 291 5 view .LVU94
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 387              		.loc 1 293 5 view .LVU95
 291:Core/Src/main.c **** 
 388              		.loc 1 291 15 is_stmt 0 view .LVU96
 389 0150 0022     		movs	r2, #0
 390              	.LVL30:
 291:Core/Src/main.c **** 
 391              		.loc 1 291 15 view .LVU97
 392 0152 0192     		str	r2, [sp, #4]
 393 0154 9146     		mov	r9, r2
 290:Core/Src/main.c **** 		  iteration = 0;
 394              		.loc 1 290 9 view .LVU98
 395 0156 1446     		mov	r4, r2
 396 0158 1646     		mov	r6, r2
 289:Core/Src/main.c **** 		  y_i = 0;
 397              		.loc 1 289 9 view .LVU99
 398 015a 1546     		mov	r5, r2
 399 015c 0292     		str	r2, [sp, #8]
 400 015e CDF824B0 		str	fp, [sp, #36]
 401 0162 CDF828A0 		str	r10, [sp, #40]
 402 0166 0B93     		str	r3, [sp, #44]
 403 0168 CDF83080 		str	r8, [sp, #48]
 404 016c CDF834C0 		str	ip, [sp, #52]
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 405              		.loc 1 293 10 view .LVU100
 406 0170 9CE7     		b	.L7
 407              	.LVL31:
 408              	.L14:
 293:Core/Src/main.c **** 			  temp = ((x_i*x_i)/1000000)-((y_i*y_i)/1000000) + (x_0);
 409              		.loc 1 293 10 view .LVU101
 410              	.LBE8:
 285:Core/Src/main.c **** 	  for(int x=0; x<width; x++){
 411              		.loc 1 285 27 discriminator 2 view .LVU102
 412 0172 9A46     		mov	r10, r3
 413              	.LVL32:
 285:Core/Src/main.c **** 	  for(int x=0; x<width; x++){
 414              		.loc 1 285 27 discriminator 2 view .LVU103
 415 0174 5B46     		mov	r3, fp
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 14


 416 0176 4246     		mov	r2, r8
 285:Core/Src/main.c **** 	  for(int x=0; x<width; x++){
 417              		.loc 1 285 27 is_stmt 1 discriminator 2 view .LVU104
 418 0178 0133     		adds	r3, r3, #1
 419              	.LVL33:
 420              	.L6:
 285:Core/Src/main.c **** 	  for(int x=0; x<width; x++){
 421              		.loc 1 285 17 discriminator 1 view .LVU105
 422 017a 1199     		ldr	r1, [sp, #68]
 423 017c 8B42     		cmp	r3, r1
 424 017e 06DA     		bge	.L15
 425              	.LBB9:
 286:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 426              		.loc 1 286 12 is_stmt 0 view .LVU106
 427 0180 4FF00009 		mov	r9, #0
 428 0184 9B46     		mov	fp, r3
 429 0186 5346     		mov	r3, r10
 430              	.LVL34:
 286:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 431              		.loc 1 286 12 view .LVU107
 432 0188 CA46     		mov	r10, r9
 433 018a 9046     		mov	r8, r2
 434 018c BDE7     		b	.L11
 435              	.LVL35:
 436              	.L15:
 286:Core/Src/main.c **** 		  x_0 = (x*w_adj) - (2500000);
 437              		.loc 1 286 12 view .LVU108
 438              	.LBE9:
 439              	.LBE10:
 300:Core/Src/main.c **** 	  }
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c ****   return mandelbrot_sum;
 440              		.loc 1 302 3 is_stmt 1 view .LVU109
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** 
 305:Core/Src/main.c **** }
 441              		.loc 1 305 1 is_stmt 0 view .LVU110
 442 018e 0898     		ldr	r0, [sp, #32]
 443 0190 6146     		mov	r1, ip
 444 0192 13B0     		add	sp, sp, #76
 445              	.LCFI5:
 446              		.cfi_def_cfa_offset 36
 447              		@ sp needed
 448 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 449              	.LVL36:
 450              	.L17:
 451              		.loc 1 305 1 view .LVU111
 452              		.align	3
 453              	.L16:
 454 0198 40420F00 		.word	1000000
 455 019c C0BDF0FF 		.word	-1000000
 456 01a0 20A10700 		.word	500000
 457 01a4 3F82A352 		.word	1386447423
 458 01a8 60DAD9FF 		.word	-2500000
 459 01ac 00000000 		.word	0
 460 01b0 80843E41 		.word	1094616192
 461 01b4 00000000 		.word	0
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 15


 462 01b8 F0B34A41 		.word	1095414768
 463              		.cfi_endproc
 464              	.LFE137:
 466              		.global	__aeabi_dmul
 467              		.global	__aeabi_dsub
 468              		.global	__aeabi_dadd
 469              		.global	__aeabi_dcmpgt
 470              		.global	__aeabi_dcmple
 471              		.global	__aeabi_ul2d
 472              		.global	__aeabi_d2ulz
 473              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 474              		.align	1
 475              		.global	calculate_mandelbrot_double
 476              		.syntax unified
 477              		.thumb
 478              		.thumb_func
 480              	calculate_mandelbrot_double:
 481              	.LVL37:
 482              	.LFB138:
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 308:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 483              		.loc 1 308 80 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 80
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		.loc 1 308 80 is_stmt 0 view .LVU113
 488 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 489              	.LCFI6:
 490              		.cfi_def_cfa_offset 36
 491              		.cfi_offset 4, -36
 492              		.cfi_offset 5, -32
 493              		.cfi_offset 6, -28
 494              		.cfi_offset 7, -24
 495              		.cfi_offset 8, -20
 496              		.cfi_offset 9, -16
 497              		.cfi_offset 10, -12
 498              		.cfi_offset 11, -8
 499              		.cfi_offset 14, -4
 500 0004 95B0     		sub	sp, sp, #84
 501              	.LCFI7:
 502              		.cfi_def_cfa_offset 120
 503 0006 0D46     		mov	r5, r1
 504 0008 0892     		str	r2, [sp, #32]
 309:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 505              		.loc 1 309 5 is_stmt 1 view .LVU114
 506              	.LVL38:
 310:Core/Src/main.c ****     //TODO: Complete the function implementation
 311:Core/Src/main.c ****     double x_0;
 507              		.loc 1 311 5 view .LVU115
 312:Core/Src/main.c ****     double y_0;
 508              		.loc 1 312 5 view .LVU116
 313:Core/Src/main.c ****     double x_i;
 509              		.loc 1 313 5 view .LVU117
 314:Core/Src/main.c ****     double y_i;
 510              		.loc 1 314 5 view .LVU118
 315:Core/Src/main.c ****     double iteration;
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 16


 511              		.loc 1 315 5 view .LVU119
 316:Core/Src/main.c ****     double temp;
 512              		.loc 1 316 5 view .LVU120
 317:Core/Src/main.c ****     double w_adj=3.5/width;
 513              		.loc 1 317 5 view .LVU121
 514              		.loc 1 317 21 is_stmt 0 view .LVU122
 515 000a FFF7FEFF 		bl	__aeabi_i2d
 516              	.LVL39:
 517              		.loc 1 317 21 view .LVU123
 518 000e 0646     		mov	r6, r0
 519 0010 0F46     		mov	r7, r1
 520 0012 CDE90C67 		strd	r6, [sp, #48]
 521              		.loc 1 317 12 view .LVU124
 522 0016 0246     		mov	r2, r0
 523 0018 0B46     		mov	r3, r1
 524 001a 0020     		movs	r0, #0
 525 001c 5E49     		ldr	r1, .L31+8
 526 001e FFF7FEFF 		bl	__aeabi_ddiv
 527              	.LVL40:
 528 0022 CDE90E01 		strd	r0, [sp, #56]
 529              	.LVL41:
 318:Core/Src/main.c ****     double h_adj=2.0/width;
 530              		.loc 1 318 5 is_stmt 1 view .LVU125
 531              		.loc 1 318 12 is_stmt 0 view .LVU126
 532 0026 3246     		mov	r2, r6
 533 0028 3B46     		mov	r3, r7
 534 002a 0020     		movs	r0, #0
 535              	.LVL42:
 536              		.loc 1 318 12 view .LVU127
 537 002c 4FF08041 		mov	r1, #1073741824
 538 0030 FFF7FEFF 		bl	__aeabi_ddiv
 539              	.LVL43:
 540 0034 CDE91001 		strd	r0, [sp, #64]
 541              	.LVL44:
 319:Core/Src/main.c ****     for(double y=0; y<height; y++){
 542              		.loc 1 319 5 is_stmt 1 view .LVU128
 543              	.LBB11:
 544              		.loc 1 319 9 view .LVU129
 545              		.loc 1 319 16 is_stmt 0 view .LVU130
 546 0038 9FED557B 		vldr.64	d7, .L31
 547 003c 8DED0A7B 		vstr.64	d7, [sp, #40]
 548              	.LBE11:
 309:Core/Src/main.c ****     //TODO: Complete the function implementation
 549              		.loc 1 309 14 view .LVU131
 550 0040 0023     		movs	r3, #0
 551 0042 0993     		str	r3, [sp, #36]
 552 0044 1293     		str	r3, [sp, #72]
 553 0046 1395     		str	r5, [sp, #76]
 554              	.LBB14:
 555              		.loc 1 319 5 view .LVU132
 556 0048 8DE0     		b	.L19
 557              	.LVL45:
 558              	.L23:
 559              	.LBB12:
 320:Core/Src/main.c ****        for(double x=0; x<width; x++){
 321:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 322:Core/Src/main.c ****     	  y_0 = (y*h_adj) - 1.0;
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 17


 323:Core/Src/main.c ****     	  x_i = 0;
 324:Core/Src/main.c ****     	  y_i = 0;
 325:Core/Src/main.c ****           iteration = 0;
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****     	  while((iteration < max_iterations) && ((x_i*x_i) + (y_i*y_i) <= 4)){
 328:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 560              		.loc 1 328 7 is_stmt 1 view .LVU133
 561              		.loc 1 328 23 is_stmt 0 view .LVU134
 562 004a 3246     		mov	r2, r6
 563 004c 3B46     		mov	r3, r7
 564 004e DDE90001 		ldrd	r0, [sp]
 565 0052 FFF7FEFF 		bl	__aeabi_dsub
 566              	.LVL46:
 567              		.loc 1 328 12 view .LVU135
 568 0056 DDE90223 		ldrd	r2, [sp, #8]
 569 005a FFF7FEFF 		bl	__aeabi_dadd
 570              	.LVL47:
 571 005e 0646     		mov	r6, r0
 572 0060 0F46     		mov	r7, r1
 573              	.LVL48:
 329:Core/Src/main.c ****     		y_i = (2*x_i*y_i) + y_0;
 574              		.loc 1 329 7 is_stmt 1 view .LVU136
 575              		.loc 1 329 15 is_stmt 0 view .LVU137
 576 0062 2246     		mov	r2, r4
 577 0064 2B46     		mov	r3, r5
 578 0066 2046     		mov	r0, r4
 579 0068 2946     		mov	r1, r5
 580 006a FFF7FEFF 		bl	__aeabi_dadd
 581              	.LVL49:
 582              		.loc 1 329 19 view .LVU138
 583 006e 5246     		mov	r2, r10
 584 0070 5B46     		mov	r3, fp
 585 0072 FFF7FEFF 		bl	__aeabi_dmul
 586              	.LVL50:
 587              		.loc 1 329 11 view .LVU139
 588 0076 DDE90423 		ldrd	r2, [sp, #16]
 589 007a FFF7FEFF 		bl	__aeabi_dadd
 590              	.LVL51:
 591 007e 8246     		mov	r10, r0
 592              	.LVL52:
 593              		.loc 1 329 11 view .LVU140
 594 0080 8B46     		mov	fp, r1
 595              	.LVL53:
 330:Core/Src/main.c ****     		x_i = temp;
 596              		.loc 1 330 7 is_stmt 1 view .LVU141
 331:Core/Src/main.c ****     		iteration += 1;
 597              		.loc 1 331 7 view .LVU142
 598              		.loc 1 331 17 is_stmt 0 view .LVU143
 599 0082 0022     		movs	r2, #0
 600 0084 454B     		ldr	r3, .L31+12
 601 0086 4046     		mov	r0, r8
 602 0088 4946     		mov	r1, r9
 603 008a FFF7FEFF 		bl	__aeabi_dadd
 604              	.LVL54:
 605 008e 8046     		mov	r8, r0
 606              	.LVL55:
 607              		.loc 1 331 17 view .LVU144
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 18


 608 0090 8946     		mov	r9, r1
 609              	.LVL56:
 330:Core/Src/main.c ****     		x_i = temp;
 610              		.loc 1 330 11 view .LVU145
 611 0092 3446     		mov	r4, r6
 612 0094 3D46     		mov	r5, r7
 613              	.LVL57:
 614              	.L20:
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 615              		.loc 1 327 43 is_stmt 1 view .LVU146
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 616              		.loc 1 327 25 is_stmt 0 view .LVU147
 617 0096 0898     		ldr	r0, [sp, #32]
 618 0098 FFF7FEFF 		bl	__aeabi_i2d
 619              	.LVL58:
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 620              		.loc 1 327 43 view .LVU148
 621 009c 4246     		mov	r2, r8
 622 009e 4B46     		mov	r3, r9
 623 00a0 FFF7FEFF 		bl	__aeabi_dcmpgt
 624              	.LVL59:
 625 00a4 D8B1     		cbz	r0, .L21
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 626              		.loc 1 327 51 discriminator 1 view .LVU149
 627 00a6 2246     		mov	r2, r4
 628 00a8 2B46     		mov	r3, r5
 629 00aa 2046     		mov	r0, r4
 630 00ac 2946     		mov	r1, r5
 631 00ae FFF7FEFF 		bl	__aeabi_dmul
 632              	.LVL60:
 633 00b2 CDE90001 		strd	r0, [sp]
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 634              		.loc 1 327 63 discriminator 1 view .LVU150
 635 00b6 5246     		mov	r2, r10
 636 00b8 5B46     		mov	r3, fp
 637 00ba 5046     		mov	r0, r10
 638 00bc 5946     		mov	r1, fp
 639 00be FFF7FEFF 		bl	__aeabi_dmul
 640              	.LVL61:
 641 00c2 0646     		mov	r6, r0
 642 00c4 0F46     		mov	r7, r1
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 643              		.loc 1 327 57 discriminator 1 view .LVU151
 644 00c6 0246     		mov	r2, r0
 645 00c8 0B46     		mov	r3, r1
 646 00ca DDE90001 		ldrd	r0, [sp]
 647 00ce FFF7FEFF 		bl	__aeabi_dadd
 648              	.LVL62:
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 649              		.loc 1 327 43 discriminator 1 view .LVU152
 650 00d2 0022     		movs	r2, #0
 651 00d4 324B     		ldr	r3, .L31+16
 652 00d6 FFF7FEFF 		bl	__aeabi_dcmple
 653              	.LVL63:
 654 00da 0028     		cmp	r0, #0
 655 00dc B5D1     		bne	.L23
 656              	.L21:
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 19


 332:Core/Src/main.c ****     	  }
 333:Core/Src/main.c ****     	  mandelbrot_sum += iteration;
 657              		.loc 1 333 8 is_stmt 1 view .LVU153
 658              		.loc 1 333 23 is_stmt 0 view .LVU154
 659 00de 0998     		ldr	r0, [sp, #36]
 660 00e0 1299     		ldr	r1, [sp, #72]
 661 00e2 FFF7FEFF 		bl	__aeabi_ul2d
 662              	.LVL64:
 663 00e6 4246     		mov	r2, r8
 664 00e8 4B46     		mov	r3, r9
 665 00ea FFF7FEFF 		bl	__aeabi_dadd
 666              	.LVL65:
 667 00ee FFF7FEFF 		bl	__aeabi_d2ulz
 668              	.LVL66:
 669 00f2 0990     		str	r0, [sp, #36]
 670              	.LVL67:
 671              		.loc 1 333 23 view .LVU155
 672 00f4 1291     		str	r1, [sp, #72]
 673              	.LVL68:
 320:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 674              		.loc 1 320 34 is_stmt 1 discriminator 2 view .LVU156
 675 00f6 0022     		movs	r2, #0
 676 00f8 284B     		ldr	r3, .L31+12
 677 00fa DDE90601 		ldrd	r0, [sp, #24]
 678              	.LVL69:
 320:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 679              		.loc 1 320 34 is_stmt 0 discriminator 2 view .LVU157
 680 00fe FFF7FEFF 		bl	__aeabi_dadd
 681              	.LVL70:
 320:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 682              		.loc 1 320 34 discriminator 2 view .LVU158
 683 0102 CDE90601 		strd	r0, [sp, #24]
 684              	.LVL71:
 685              	.L25:
 320:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 686              		.loc 1 320 25 is_stmt 1 discriminator 1 view .LVU159
 687 0106 DDE90623 		ldrd	r2, [sp, #24]
 688 010a DDE90C01 		ldrd	r0, [sp, #48]
 689 010e FFF7FEFF 		bl	__aeabi_dcmpgt
 690              	.LVL72:
 691 0112 00B3     		cbz	r0, .L29
 321:Core/Src/main.c ****     	  y_0 = (y*h_adj) - 1.0;
 692              		.loc 1 321 8 view .LVU160
 321:Core/Src/main.c ****     	  y_0 = (y*h_adj) - 1.0;
 693              		.loc 1 321 16 is_stmt 0 view .LVU161
 694 0114 DDE90E23 		ldrd	r2, [sp, #56]
 695 0118 DDE90601 		ldrd	r0, [sp, #24]
 696 011c FFF7FEFF 		bl	__aeabi_dmul
 697              	.LVL73:
 321:Core/Src/main.c ****     	  y_0 = (y*h_adj) - 1.0;
 698              		.loc 1 321 12 view .LVU162
 699 0120 0022     		movs	r2, #0
 700 0122 204B     		ldr	r3, .L31+20
 701 0124 FFF7FEFF 		bl	__aeabi_dsub
 702              	.LVL74:
 703 0128 CDE90201 		strd	r0, [sp, #8]
 704              	.LVL75:
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 20


 322:Core/Src/main.c ****     	  x_i = 0;
 705              		.loc 1 322 8 is_stmt 1 view .LVU163
 322:Core/Src/main.c ****     	  x_i = 0;
 706              		.loc 1 322 16 is_stmt 0 view .LVU164
 707 012c DDE91023 		ldrd	r2, [sp, #64]
 708 0130 DDE90A01 		ldrd	r0, [sp, #40]
 709              	.LVL76:
 322:Core/Src/main.c ****     	  x_i = 0;
 710              		.loc 1 322 16 view .LVU165
 711 0134 FFF7FEFF 		bl	__aeabi_dmul
 712              	.LVL77:
 322:Core/Src/main.c ****     	  x_i = 0;
 713              		.loc 1 322 12 view .LVU166
 714 0138 0022     		movs	r2, #0
 715 013a 184B     		ldr	r3, .L31+12
 716 013c FFF7FEFF 		bl	__aeabi_dsub
 717              	.LVL78:
 718 0140 CDE90401 		strd	r0, [sp, #16]
 719              	.LVL79:
 323:Core/Src/main.c ****     	  y_i = 0;
 720              		.loc 1 323 8 is_stmt 1 view .LVU167
 324:Core/Src/main.c ****           iteration = 0;
 721              		.loc 1 324 8 view .LVU168
 325:Core/Src/main.c **** 
 722              		.loc 1 325 11 view .LVU169
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 723              		.loc 1 327 8 view .LVU170
 325:Core/Src/main.c **** 
 724              		.loc 1 325 21 is_stmt 0 view .LVU171
 725 0144 4FF00008 		mov	r8, #0
 726 0148 4FF00009 		mov	r9, #0
 324:Core/Src/main.c ****           iteration = 0;
 727              		.loc 1 324 12 view .LVU172
 728 014c C246     		mov	r10, r8
 729 014e CB46     		mov	fp, r9
 323:Core/Src/main.c ****     	  y_i = 0;
 730              		.loc 1 323 12 view .LVU173
 731 0150 4446     		mov	r4, r8
 732 0152 4D46     		mov	r5, r9
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 733              		.loc 1 327 13 view .LVU174
 734 0154 9FE7     		b	.L20
 735              	.LVL80:
 736              	.L29:
 327:Core/Src/main.c ****     		temp = (x_i*x_i)-(y_i*y_i) + x_0;
 737              		.loc 1 327 13 view .LVU175
 738              	.LBE12:
 319:Core/Src/main.c ****        for(double x=0; x<width; x++){
 739              		.loc 1 319 32 is_stmt 1 discriminator 2 view .LVU176
 740 0156 0022     		movs	r2, #0
 741 0158 104B     		ldr	r3, .L31+12
 742 015a DDE90A01 		ldrd	r0, [sp, #40]
 743 015e FFF7FEFF 		bl	__aeabi_dadd
 744              	.LVL81:
 745 0162 CDE90A01 		strd	r0, [sp, #40]
 746              	.LVL82:
 747              	.L19:
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 21


 319:Core/Src/main.c ****        for(double x=0; x<width; x++){
 748              		.loc 1 319 22 discriminator 1 view .LVU177
 749 0166 1398     		ldr	r0, [sp, #76]
 750 0168 FFF7FEFF 		bl	__aeabi_i2d
 751              	.LVL83:
 752 016c DDE90A23 		ldrd	r2, [sp, #40]
 753 0170 FFF7FEFF 		bl	__aeabi_dcmpgt
 754              	.LVL84:
 755 0174 20B1     		cbz	r0, .L30
 756              	.LBB13:
 320:Core/Src/main.c ****     	  x_0 = (x*w_adj) - 2.5;
 757              		.loc 1 320 19 is_stmt 0 view .LVU178
 758 0176 9FED067B 		vldr.64	d7, .L31
 759 017a 8DED067B 		vstr.64	d7, [sp, #24]
 760 017e C2E7     		b	.L25
 761              	.L30:
 762              	.LBE13:
 763              	.LBE14:
 334:Core/Src/main.c ****        }
 335:Core/Src/main.c ****     }
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****     return mandelbrot_sum;
 764              		.loc 1 337 5 is_stmt 1 view .LVU179
 338:Core/Src/main.c **** }
 765              		.loc 1 338 1 is_stmt 0 view .LVU180
 766 0180 0998     		ldr	r0, [sp, #36]
 767 0182 1299     		ldr	r1, [sp, #72]
 768 0184 15B0     		add	sp, sp, #84
 769              	.LCFI8:
 770              		.cfi_def_cfa_offset 36
 771              		@ sp needed
 772 0186 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 773              	.LVL85:
 774              	.L32:
 775              		.loc 1 338 1 view .LVU181
 776 018a 00BFAFF3 		.align	3
 776      0080
 777              	.L31:
 778 0190 00000000 		.word	0
 779 0194 00000000 		.word	0
 780 0198 00000C40 		.word	1074528256
 781 019c 0000F03F 		.word	1072693248
 782 01a0 00001040 		.word	1074790400
 783 01a4 00000440 		.word	1074003968
 784              		.cfi_endproc
 785              	.LFE138:
 787              		.section	.text.Error_Handler,"ax",%progbits
 788              		.align	1
 789              		.global	Error_Handler
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 794              	Error_Handler:
 795              	.LFB139:
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /* USER CODE END 4 */
 341:Core/Src/main.c **** 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 22


 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 344:Core/Src/main.c ****   * @retval None
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** void Error_Handler(void)
 347:Core/Src/main.c **** {
 796              		.loc 1 347 1 is_stmt 1 view -0
 797              		.cfi_startproc
 798              		@ Volatile: function does not return.
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 348:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 349:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 350:Core/Src/main.c ****   __disable_irq();
 802              		.loc 1 350 3 view .LVU183
 803              	.LBB15:
 804              	.LBI15:
 805              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 23


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 24


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 25


 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 26


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 27


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 28


 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 29


 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 30


 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 31


 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 32


 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 33


 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 34


 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 35


 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 36


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 37


 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 38


 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 39


 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 806              		.loc 2 960 27 view .LVU184
 807              	.LBB16:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 808              		.loc 2 962 3 view .LVU185
 809              		.syntax unified
 810              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 811 0000 72B6     		cpsid i
 812              	@ 0 "" 2
 813              		.thumb
 814              		.syntax unified
 815              	.L34:
 816              	.LBE16:
 817              	.LBE15:
 351:Core/Src/main.c ****   while (1)
 818              		.loc 1 351 3 view .LVU186
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****   }
 819              		.loc 1 353 3 view .LVU187
 351:Core/Src/main.c ****   while (1)
 820              		.loc 1 351 9 view .LVU188
 821 0002 FEE7     		b	.L34
 822              		.cfi_endproc
 823              	.LFE139:
 825              		.section	.text.SystemClock_Config,"ax",%progbits
 826              		.align	1
 827              		.global	SystemClock_Config
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 832              	SystemClock_Config:
 833              	.LFB135:
 195:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 834              		.loc 1 195 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 80
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838 0000 00B5     		push	{lr}
 839              	.LCFI9:
 840              		.cfi_def_cfa_offset 4
 841              		.cfi_offset 14, -4
 842 0002 95B0     		sub	sp, sp, #84
 843              	.LCFI10:
 844              		.cfi_def_cfa_offset 88
 196:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 845              		.loc 1 196 3 view .LVU190
 196:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 40


 846              		.loc 1 196 22 is_stmt 0 view .LVU191
 847 0004 3422     		movs	r2, #52
 848 0006 0021     		movs	r1, #0
 849 0008 07A8     		add	r0, sp, #28
 850 000a FFF7FEFF 		bl	memset
 851              	.LVL86:
 197:Core/Src/main.c **** 
 852              		.loc 1 197 3 is_stmt 1 view .LVU192
 197:Core/Src/main.c **** 
 853              		.loc 1 197 22 is_stmt 0 view .LVU193
 854 000e 0023     		movs	r3, #0
 855 0010 0293     		str	r3, [sp, #8]
 856 0012 0393     		str	r3, [sp, #12]
 857 0014 0493     		str	r3, [sp, #16]
 858 0016 0593     		str	r3, [sp, #20]
 859 0018 0693     		str	r3, [sp, #24]
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 860              		.loc 1 201 3 is_stmt 1 view .LVU194
 861              	.LBB17:
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 862              		.loc 1 201 3 view .LVU195
 863 001a 0093     		str	r3, [sp]
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 864              		.loc 1 201 3 view .LVU196
 865 001c 214A     		ldr	r2, .L41
 866 001e 116C     		ldr	r1, [r2, #64]
 867 0020 41F08051 		orr	r1, r1, #268435456
 868 0024 1164     		str	r1, [r2, #64]
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 869              		.loc 1 201 3 view .LVU197
 870 0026 126C     		ldr	r2, [r2, #64]
 871 0028 02F08052 		and	r2, r2, #268435456
 872 002c 0092     		str	r2, [sp]
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 873              		.loc 1 201 3 view .LVU198
 874 002e 009A     		ldr	r2, [sp]
 875              	.LBE17:
 201:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 876              		.loc 1 201 3 view .LVU199
 202:Core/Src/main.c **** 
 877              		.loc 1 202 3 view .LVU200
 878              	.LBB18:
 202:Core/Src/main.c **** 
 879              		.loc 1 202 3 view .LVU201
 880 0030 0193     		str	r3, [sp, #4]
 202:Core/Src/main.c **** 
 881              		.loc 1 202 3 view .LVU202
 882 0032 1D4A     		ldr	r2, .L41+4
 883 0034 1368     		ldr	r3, [r2]
 884 0036 23F44043 		bic	r3, r3, #49152
 885 003a 43F48043 		orr	r3, r3, #16384
 886 003e 1360     		str	r3, [r2]
 202:Core/Src/main.c **** 
 887              		.loc 1 202 3 view .LVU203
 888 0040 1368     		ldr	r3, [r2]
 889 0042 03F44043 		and	r3, r3, #49152
 890 0046 0193     		str	r3, [sp, #4]
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 41


 202:Core/Src/main.c **** 
 891              		.loc 1 202 3 view .LVU204
 892 0048 019B     		ldr	r3, [sp, #4]
 893              	.LBE18:
 202:Core/Src/main.c **** 
 894              		.loc 1 202 3 view .LVU205
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 895              		.loc 1 207 3 view .LVU206
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 896              		.loc 1 207 36 is_stmt 0 view .LVU207
 897 004a 0123     		movs	r3, #1
 898 004c 0793     		str	r3, [sp, #28]
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 899              		.loc 1 208 3 is_stmt 1 view .LVU208
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 900              		.loc 1 208 30 is_stmt 0 view .LVU209
 901 004e 4FF48033 		mov	r3, #65536
 902 0052 0893     		str	r3, [sp, #32]
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 903              		.loc 1 209 3 is_stmt 1 view .LVU210
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 904              		.loc 1 209 34 is_stmt 0 view .LVU211
 905 0054 0223     		movs	r3, #2
 906 0056 0D93     		str	r3, [sp, #52]
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 907              		.loc 1 210 3 is_stmt 1 view .LVU212
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 908              		.loc 1 210 35 is_stmt 0 view .LVU213
 909 0058 4FF48002 		mov	r2, #4194304
 910 005c 0E92     		str	r2, [sp, #56]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 911              		.loc 1 211 3 is_stmt 1 view .LVU214
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 912              		.loc 1 211 30 is_stmt 0 view .LVU215
 913 005e 0F22     		movs	r2, #15
 914 0060 0F92     		str	r2, [sp, #60]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 915              		.loc 1 212 3 is_stmt 1 view .LVU216
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 916              		.loc 1 212 30 is_stmt 0 view .LVU217
 917 0062 9022     		movs	r2, #144
 918 0064 1092     		str	r2, [sp, #64]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 919              		.loc 1 213 3 is_stmt 1 view .LVU218
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 920              		.loc 1 213 30 is_stmt 0 view .LVU219
 921 0066 1193     		str	r3, [sp, #68]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 922              		.loc 1 214 3 is_stmt 1 view .LVU220
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 923              		.loc 1 214 30 is_stmt 0 view .LVU221
 924 0068 1293     		str	r3, [sp, #72]
 215:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 925              		.loc 1 215 3 is_stmt 1 view .LVU222
 215:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 926              		.loc 1 215 30 is_stmt 0 view .LVU223
 927 006a 1393     		str	r3, [sp, #76]
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 42


 216:Core/Src/main.c ****   {
 928              		.loc 1 216 3 is_stmt 1 view .LVU224
 216:Core/Src/main.c ****   {
 929              		.loc 1 216 7 is_stmt 0 view .LVU225
 930 006c 07A8     		add	r0, sp, #28
 931 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 932              	.LVL87:
 216:Core/Src/main.c ****   {
 933              		.loc 1 216 6 discriminator 1 view .LVU226
 934 0072 98B9     		cbnz	r0, .L39
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 935              		.loc 1 223 3 is_stmt 1 view .LVU227
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 936              		.loc 1 223 31 is_stmt 0 view .LVU228
 937 0074 0F23     		movs	r3, #15
 938 0076 0293     		str	r3, [sp, #8]
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 939              		.loc 1 225 3 is_stmt 1 view .LVU229
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 940              		.loc 1 225 34 is_stmt 0 view .LVU230
 941 0078 0223     		movs	r3, #2
 942 007a 0393     		str	r3, [sp, #12]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 943              		.loc 1 226 3 is_stmt 1 view .LVU231
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 944              		.loc 1 226 35 is_stmt 0 view .LVU232
 945 007c 0023     		movs	r3, #0
 946 007e 0493     		str	r3, [sp, #16]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 947              		.loc 1 227 3 is_stmt 1 view .LVU233
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 948              		.loc 1 227 36 is_stmt 0 view .LVU234
 949 0080 4FF4A053 		mov	r3, #5120
 950 0084 0593     		str	r3, [sp, #20]
 228:Core/Src/main.c **** 
 951              		.loc 1 228 3 is_stmt 1 view .LVU235
 228:Core/Src/main.c **** 
 952              		.loc 1 228 36 is_stmt 0 view .LVU236
 953 0086 4FF48053 		mov	r3, #4096
 954 008a 0693     		str	r3, [sp, #24]
 230:Core/Src/main.c ****   {
 955              		.loc 1 230 3 is_stmt 1 view .LVU237
 230:Core/Src/main.c ****   {
 956              		.loc 1 230 7 is_stmt 0 view .LVU238
 957 008c 0321     		movs	r1, #3
 958 008e 02A8     		add	r0, sp, #8
 959 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 960              	.LVL88:
 230:Core/Src/main.c ****   {
 961              		.loc 1 230 6 discriminator 1 view .LVU239
 962 0094 20B9     		cbnz	r0, .L40
 234:Core/Src/main.c **** 
 963              		.loc 1 234 1 view .LVU240
 964 0096 15B0     		add	sp, sp, #84
 965              	.LCFI11:
 966              		.cfi_remember_state
 967              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 43


 968              		@ sp needed
 969 0098 5DF804FB 		ldr	pc, [sp], #4
 970              	.L39:
 971              	.LCFI12:
 972              		.cfi_restore_state
 218:Core/Src/main.c ****   }
 973              		.loc 1 218 5 is_stmt 1 view .LVU241
 974 009c FFF7FEFF 		bl	Error_Handler
 975              	.LVL89:
 976              	.L40:
 232:Core/Src/main.c ****   }
 977              		.loc 1 232 5 view .LVU242
 978 00a0 FFF7FEFF 		bl	Error_Handler
 979              	.LVL90:
 980              	.L42:
 981              		.align	2
 982              	.L41:
 983 00a4 00380240 		.word	1073887232
 984 00a8 00700040 		.word	1073770496
 985              		.cfi_endproc
 986              	.LFE135:
 988              		.section	.text.delay,"ax",%progbits
 989              		.align	1
 990              		.global	delay
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 995              	delay:
 996              	.LVL91:
 997              	.LFB140:
 354:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 355:Core/Src/main.c **** }
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** /**
 358:Core/Src/main.c ****  * Basic delay function
 359:Core/Src/main.c ****  */
 360:Core/Src/main.c **** void delay(uint32_t delay_time){
 998              		.loc 1 360 32 view -0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003              		.loc 1 360 32 is_stmt 0 view .LVU244
 1004 0000 82B0     		sub	sp, sp, #8
 1005              	.LCFI13:
 1006              		.cfi_def_cfa_offset 8
 361:Core/Src/main.c **** 	uint32_t i = (delay_time*8000)/8;
 1007              		.loc 1 361 2 is_stmt 1 view .LVU245
 1008              		.loc 1 361 26 is_stmt 0 view .LVU246
 1009 0002 4FF4FA53 		mov	r3, #8000
 1010 0006 03FB00F2 		mul	r2, r3, r0
 1011              	.LVL92:
 362:Core/Src/main.c **** 	uint32_t i_in = i/1000;
 1012              		.loc 1 362 2 is_stmt 1 view .LVU247
 1013              		.loc 1 362 11 is_stmt 0 view .LVU248
 1014 000a 0C4B     		ldr	r3, .L50
 1015 000c A3FB0232 		umull	r3, r2, r3, r2
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 44


 1016              	.LVL93:
 1017              		.loc 1 362 11 view .LVU249
 1018 0010 520A     		lsrs	r2, r2, #9
 1019              	.LVL94:
 363:Core/Src/main.c **** 	for(volatile uint32_t j=0; j<1000; j++){
 1020              		.loc 1 363 2 is_stmt 1 view .LVU250
 1021              	.LBB19:
 1022              		.loc 1 363 6 view .LVU251
 1023              		.loc 1 363 24 is_stmt 0 view .LVU252
 1024 0012 0023     		movs	r3, #0
 1025 0014 0093     		str	r3, [sp]
 1026              		.loc 1 363 2 view .LVU253
 1027 0016 08E0     		b	.L44
 1028              	.L46:
 1029              	.LBB20:
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 365:Core/Src/main.c **** 
 366:Core/Src/main.c **** 	  }
 1030              		.loc 1 366 4 is_stmt 1 view .LVU254
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1031              		.loc 1 364 42 discriminator 3 view .LVU255
 1032 0018 019B     		ldr	r3, [sp, #4]
 1033 001a 0133     		adds	r3, r3, #1
 1034 001c 0193     		str	r3, [sp, #4]
 1035              	.L45:
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1036              		.loc 1 364 32 discriminator 1 view .LVU256
 1037 001e 019B     		ldr	r3, [sp, #4]
 1038 0020 9342     		cmp	r3, r2
 1039 0022 F9D3     		bcc	.L46
 1040              	.LBE20:
 363:Core/Src/main.c **** 	for(volatile uint32_t j=0; j<1000; j++){
 1041              		.loc 1 363 38 discriminator 2 view .LVU257
 1042 0024 009B     		ldr	r3, [sp]
 1043 0026 0133     		adds	r3, r3, #1
 1044 0028 0093     		str	r3, [sp]
 1045              	.L44:
 363:Core/Src/main.c **** 	for(volatile uint32_t j=0; j<1000; j++){
 1046              		.loc 1 363 30 discriminator 1 view .LVU258
 1047 002a 009B     		ldr	r3, [sp]
 1048 002c B3F57A7F 		cmp	r3, #1000
 1049 0030 02D2     		bcs	.L49
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1050              		.loc 1 364 4 view .LVU259
 1051              	.LBB21:
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1052              		.loc 1 364 8 view .LVU260
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1053              		.loc 1 364 26 is_stmt 0 view .LVU261
 1054 0032 0023     		movs	r3, #0
 1055 0034 0193     		str	r3, [sp, #4]
 364:Core/Src/main.c **** 	  for(volatile uint32_t m=0; m<(i_in); m++){
 1056              		.loc 1 364 4 view .LVU262
 1057 0036 F2E7     		b	.L45
 1058              	.L49:
 1059              	.LBE21:
 1060              	.LBE19:
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 45


 367:Core/Src/main.c **** 	}
 368:Core/Src/main.c **** }
 1061              		.loc 1 368 1 view .LVU263
 1062 0038 02B0     		add	sp, sp, #8
 1063              	.LCFI14:
 1064              		.cfi_def_cfa_offset 0
 1065              		@ sp needed
 1066 003a 7047     		bx	lr
 1067              	.L51:
 1068              		.align	2
 1069              	.L50:
 1070 003c D34D6210 		.word	274877907
 1071              		.cfi_endproc
 1072              	.LFE140:
 1074              		.global	__aeabi_uldivmod
 1075              		.section	.text.main,"ax",%progbits
 1076              		.align	1
 1077              		.global	main
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1082              	main:
 1083              	.LFB134:
  90:Core/Src/main.c **** 
 1084              		.loc 1 90 1 is_stmt 1 view -0
 1085              		.cfi_startproc
 1086              		@ args = 0, pretend = 0, frame = 8
 1087              		@ frame_needed = 0, uses_anonymous_args = 0
 1088 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1089              	.LCFI15:
 1090              		.cfi_def_cfa_offset 36
 1091              		.cfi_offset 4, -36
 1092              		.cfi_offset 5, -32
 1093              		.cfi_offset 6, -28
 1094              		.cfi_offset 7, -24
 1095              		.cfi_offset 8, -20
 1096              		.cfi_offset 9, -16
 1097              		.cfi_offset 10, -12
 1098              		.cfi_offset 11, -8
 1099              		.cfi_offset 14, -4
 1100 0004 83B0     		sub	sp, sp, #12
 1101              	.LCFI16:
 1102              		.cfi_def_cfa_offset 48
  99:Core/Src/main.c **** 
 1103              		.loc 1 99 3 view .LVU265
 1104 0006 FFF7FEFF 		bl	HAL_Init
 1105              	.LVL95:
 106:Core/Src/main.c **** 
 1106              		.loc 1 106 3 view .LVU266
 1107 000a FFF7FEFF 		bl	SystemClock_Config
 1108              	.LVL96:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1109              		.loc 1 113 3 view .LVU267
 1110 000e FFF7FEFF 		bl	MX_GPIO_Init
 1111              	.LVL97:
 117:Core/Src/main.c **** 
 1112              		.loc 1 117 5 view .LVU268
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 46


 117:Core/Src/main.c **** 
 1113              		.loc 1 117 16 is_stmt 0 view .LVU269
 1114 0012 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1115              	.LVL98:
 117:Core/Src/main.c **** 
 1116              		.loc 1 117 16 discriminator 1 view .LVU270
 1117 0016 0023     		movs	r3, #0
 117:Core/Src/main.c **** 
 1118              		.loc 1 117 14 discriminator 1 view .LVU271
 1119 0018 484A     		ldr	r2, .L57
 1120 001a 1060     		str	r0, [r2]
 1121 001c 5360     		str	r3, [r2, #4]
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1122              		.loc 1 120 6 is_stmt 1 view .LVU272
 1123              	.LBB22:
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1124              		.loc 1 120 10 view .LVU273
 1125              	.LVL99:
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1126              		.loc 1 120 14 is_stmt 0 view .LVU274
 1127 001e 9846     		mov	r8, r3
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1128              		.loc 1 120 6 view .LVU275
 1129 0020 86E0     		b	.L53
 1130              	.LVL100:
 1131              	.L54:
 1132              	.LBB23:
 122:Core/Src/main.c **** 
 1133              		.loc 1 122 7 is_stmt 1 view .LVU276
 122:Core/Src/main.c **** 
 1134              		.loc 1 122 18 is_stmt 0 view .LVU277
 1135 0022 0123     		movs	r3, #1
 1136 0024 464A     		ldr	r2, .L57+4
 1137 0026 5361     		str	r3, [r2, #20]
 125:Core/Src/main.c **** 
 1138              		.loc 1 125 7 is_stmt 1 view .LVU278
 125:Core/Src/main.c **** 
 1139              		.loc 1 125 29 is_stmt 0 view .LVU279
 1140 0028 464B     		ldr	r3, .L57+8
 1141 002a 53F82830 		ldr	r3, [r3, r8, lsl #2]
 125:Core/Src/main.c **** 
 1142              		.loc 1 125 16 view .LVU280
 1143 002e DFF84C91 		ldr	r9, .L57+64
 1144 0032 C9F80030 		str	r3, [r9]
 128:Core/Src/main.c **** 
 1145              		.loc 1 128 8 is_stmt 1 view .LVU281
 128:Core/Src/main.c **** 
 1146              		.loc 1 128 21 is_stmt 0 view .LVU282
 1147 0036 FFF7FEFF 		bl	HAL_GetTick
 1148              	.LVL101:
 128:Core/Src/main.c **** 
 1149              		.loc 1 128 21 discriminator 1 view .LVU283
 1150 003a 0027     		movs	r7, #0
 128:Core/Src/main.c **** 
 1151              		.loc 1 128 19 discriminator 1 view .LVU284
 1152 003c 424D     		ldr	r5, .L57+12
 1153 003e 2860     		str	r0, [r5]
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 47


 1154 0040 6F60     		str	r7, [r5, #4]
 131:Core/Src/main.c ****    		  width = imag_dim;
 1155              		.loc 1 131 8 is_stmt 1 view .LVU285
 131:Core/Src/main.c ****    		  width = imag_dim;
 1156              		.loc 1 131 15 is_stmt 0 view .LVU286
 1157 0042 D9F80000 		ldr	r0, [r9]
 1158 0046 DFF838B1 		ldr	fp, .L57+68
 1159 004a CBF80000 		str	r0, [fp]
 132:Core/Src/main.c ****    		 //checksum = calculate_mandelbrot_double(imag_dim, imag_dim, MAX_ITER);
 1160              		.loc 1 132 8 is_stmt 1 view .LVU287
 132:Core/Src/main.c ****    		 //checksum = calculate_mandelbrot_double(imag_dim, imag_dim, MAX_ITER);
 1161              		.loc 1 132 14 is_stmt 0 view .LVU288
 1162 004e 3F4E     		ldr	r6, .L57+16
 1163 0050 3060     		str	r0, [r6]
 134:Core/Src/main.c **** 
 1164              		.loc 1 134 8 is_stmt 1 view .LVU289
 134:Core/Src/main.c **** 
 1165              		.loc 1 134 19 is_stmt 0 view .LVU290
 1166 0052 6422     		movs	r2, #100
 1167 0054 0146     		mov	r1, r0
 1168 0056 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1169              	.LVL102:
 134:Core/Src/main.c **** 
 1170              		.loc 1 134 17 discriminator 1 view .LVU291
 1171 005a DFF828A1 		ldr	r10, .L57+72
 1172 005e CAE90001 		strd	r0, [r10]
 137:Core/Src/main.c **** 
 1173              		.loc 1 137 8 is_stmt 1 view .LVU292
 137:Core/Src/main.c **** 
 1174              		.loc 1 137 19 is_stmt 0 view .LVU293
 1175 0062 FFF7FEFF 		bl	HAL_GetTick
 1176              	.LVL103:
 137:Core/Src/main.c **** 
 1177              		.loc 1 137 17 discriminator 1 view .LVU294
 1178 0066 3A4B     		ldr	r3, .L57+20
 1179 0068 1860     		str	r0, [r3]
 1180 006a 5F60     		str	r7, [r3, #4]
 140:Core/Src/main.c ****             //calculate number of clock cycles
 1181              		.loc 1 140 8 is_stmt 1 view .LVU295
 140:Core/Src/main.c ****             //calculate number of clock cycles
 1182              		.loc 1 140 32 is_stmt 0 view .LVU296
 1183 006c 2C68     		ldr	r4, [r5]
 1184 006e 6D68     		ldr	r5, [r5, #4]
 1185 0070 041B     		subs	r4, r0, r4
 1186 0072 65EB4505 		sbc	r5, r5, r5, lsl #1
 140:Core/Src/main.c ****             //calculate number of clock cycles
 1187              		.loc 1 140 21 view .LVU297
 1188 0076 374B     		ldr	r3, .L57+24
 1189 0078 1C60     		str	r4, [r3]
 1190 007a 5D60     		str	r5, [r3, #4]
 142:Core/Src/main.c **** 
 1191              		.loc 1 142 8 is_stmt 1 view .LVU298
 142:Core/Src/main.c **** 
 1192              		.loc 1 142 36 is_stmt 0 view .LVU299
 1193 007c 2F4B     		ldr	r3, .L57
 1194 007e 1868     		ldr	r0, [r3]
 1195 0080 5968     		ldr	r1, [r3, #4]
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 48


 1196 0082 04FB01F1 		mul	r1, r4, r1
 1197 0086 05FB0011 		mla	r1, r5, r0, r1
 1198 008a A0FB040C 		umull	r0, ip, r0, r4
 142:Core/Src/main.c **** 
 1199              		.loc 1 142 46 view .LVU300
 1200 008e 4FF47A72 		mov	r2, #1000
 1201 0092 0023     		movs	r3, #0
 1202 0094 6144     		add	r1, r1, ip
 1203 0096 FFF7FEFF 		bl	__aeabi_uldivmod
 1204              	.LVL104:
 142:Core/Src/main.c **** 
 1205              		.loc 1 142 21 view .LVU301
 1206 009a 2F4B     		ldr	r3, .L57+28
 1207 009c 0090     		str	r0, [sp]
 1208 009e 1860     		str	r0, [r3]
 1209 00a0 0191     		str	r1, [sp, #4]
 1210 00a2 5960     		str	r1, [r3, #4]
 145:Core/Src/main.c ****    		  throughput = num_pixels/(time_elapsed/1000);
 1211              		.loc 1 145 8 is_stmt 1 view .LVU302
 145:Core/Src/main.c ****    		  throughput = num_pixels/(time_elapsed/1000);
 1212              		.loc 1 145 27 is_stmt 0 view .LVU303
 1213 00a4 DBF80030 		ldr	r3, [fp]
 1214 00a8 3668     		ldr	r6, [r6]
 1215 00aa 03FB06F6 		mul	r6, r3, r6
 1216 00ae 4FEAE67B 		asr	fp, r6, #31
 145:Core/Src/main.c ****    		  throughput = num_pixels/(time_elapsed/1000);
 1217              		.loc 1 145 19 view .LVU304
 1218 00b2 2A4B     		ldr	r3, .L57+32
 1219 00b4 1E60     		str	r6, [r3]
 1220 00b6 C3F804B0 		str	fp, [r3, #4]
 146:Core/Src/main.c **** 
 1221              		.loc 1 146 8 is_stmt 1 view .LVU305
 146:Core/Src/main.c **** 
 1222              		.loc 1 146 45 is_stmt 0 view .LVU306
 1223 00ba 4FF47A72 		mov	r2, #1000
 1224 00be 0023     		movs	r3, #0
 1225 00c0 2046     		mov	r0, r4
 1226 00c2 2946     		mov	r1, r5
 1227 00c4 FFF7FEFF 		bl	__aeabi_uldivmod
 1228              	.LVL105:
 1229 00c8 0246     		mov	r2, r0
 1230 00ca 0B46     		mov	r3, r1
 146:Core/Src/main.c **** 
 1231              		.loc 1 146 31 view .LVU307
 1232 00cc 3046     		mov	r0, r6
 1233 00ce 5946     		mov	r1, fp
 1234 00d0 FFF7FEFF 		bl	__aeabi_uldivmod
 1235              	.LVL106:
 146:Core/Src/main.c **** 
 1236              		.loc 1 146 19 view .LVU308
 1237 00d4 224B     		ldr	r3, .L57+36
 1238 00d6 1860     		str	r0, [r3]
 1239 00d8 5960     		str	r1, [r3, #4]
 148:Core/Src/main.c ****    		 time_elapsed_arr[place] = time_elapsed;
 1240              		.loc 1 148 7 is_stmt 1 view .LVU309
 148:Core/Src/main.c ****    		 time_elapsed_arr[place] = time_elapsed;
 1241              		.loc 1 148 19 is_stmt 0 view .LVU310
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 49


 1242 00da 2249     		ldr	r1, .L57+40
 1243 00dc 0B68     		ldr	r3, [r1]
 148:Core/Src/main.c ****    		 time_elapsed_arr[place] = time_elapsed;
 1244              		.loc 1 148 27 view .LVU311
 1245 00de D9F80060 		ldr	r6, [r9]
 1246 00e2 214A     		ldr	r2, .L57+44
 1247 00e4 42F82360 		str	r6, [r2, r3, lsl #2]
 149:Core/Src/main.c ****    	     clock_cycles_arr[place] = clock_cycles;
 1248              		.loc 1 149 7 is_stmt 1 view .LVU312
 149:Core/Src/main.c ****    	     clock_cycles_arr[place] = clock_cycles;
 1249              		.loc 1 149 31 is_stmt 0 view .LVU313
 1250 00e8 204A     		ldr	r2, .L57+48
 1251 00ea 02EBC306 		add	r6, r2, r3, lsl #3
 1252 00ee 42F83340 		str	r4, [r2, r3, lsl #3]
 1253 00f2 7560     		str	r5, [r6, #4]
 150:Core/Src/main.c ****    		 throughput_arr[place] = throughput;
 1254              		.loc 1 150 10 is_stmt 1 view .LVU314
 150:Core/Src/main.c ****    		 throughput_arr[place] = throughput;
 1255              		.loc 1 150 34 is_stmt 0 view .LVU315
 1256 00f4 1E4A     		ldr	r2, .L57+52
 1257 00f6 02EBC302 		add	r2, r2, r3, lsl #3
 1258 00fa 009C     		ldr	r4, [sp]
 1259 00fc 1460     		str	r4, [r2]
 1260 00fe 019C     		ldr	r4, [sp, #4]
 1261 0100 5460     		str	r4, [r2, #4]
 151:Core/Src/main.c ****    		 checksum_arr[place] = checksum;
 1262              		.loc 1 151 7 is_stmt 1 view .LVU316
 151:Core/Src/main.c ****    		 checksum_arr[place] = checksum;
 1263              		.loc 1 151 29 is_stmt 0 view .LVU317
 1264 0102 1C4A     		ldr	r2, .L57+56
 1265 0104 42F82300 		str	r0, [r2, r3, lsl #2]
 152:Core/Src/main.c ****    		 // increment the index for all output arrays
 1266              		.loc 1 152 7 is_stmt 1 view .LVU318
 152:Core/Src/main.c ****    		 // increment the index for all output arrays
 1267              		.loc 1 152 27 is_stmt 0 view .LVU319
 1268 0108 1B4A     		ldr	r2, .L57+60
 1269 010a 02EBC302 		add	r2, r2, r3, lsl #3
 1270 010e DAE90045 		ldrd	r4, [r10]
 1271 0112 C2E90045 		strd	r4, [r2]
 154:Core/Src/main.c **** 
 1272              		.loc 1 154 7 is_stmt 1 view .LVU320
 154:Core/Src/main.c **** 
 1273              		.loc 1 154 12 is_stmt 0 view .LVU321
 1274 0116 0133     		adds	r3, r3, #1
 1275 0118 0B60     		str	r3, [r1]
 157:Core/Src/main.c **** 
 1276              		.loc 1 157 8 is_stmt 1 view .LVU322
 157:Core/Src/main.c **** 
 1277              		.loc 1 157 19 is_stmt 0 view .LVU323
 1278 011a 0323     		movs	r3, #3
 1279 011c 084A     		ldr	r2, .L57+4
 1280 011e 1446     		mov	r4, r2
 1281 0120 5361     		str	r3, [r2, #20]
 160:Core/Src/main.c **** 
 1282              		.loc 1 160 8 is_stmt 1 view .LVU324
 1283 0122 4FF47A70 		mov	r0, #1000
 1284 0126 FFF7FEFF 		bl	delay
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 50


 1285              	.LVL107:
 165:Core/Src/main.c ****      }
 1286              		.loc 1 165 7 view .LVU325
 165:Core/Src/main.c ****      }
 1287              		.loc 1 165 18 is_stmt 0 view .LVU326
 1288 012a 6761     		str	r7, [r4, #20]
 1289              	.LBE23:
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1290              		.loc 1 120 25 is_stmt 1 discriminator 3 view .LVU327
 1291 012c 08F10108 		add	r8, r8, #1
 1292              	.LVL108:
 1293              	.L53:
 120:Core/Src/main.c ****    	  //TODO: Turn on LED 0 to signify the start of the operation
 1294              		.loc 1 120 20 discriminator 1 view .LVU328
 1295 0130 B8F1040F 		cmp	r8, #4
 1296 0134 7FF775AF 		ble	.L54
 1297              	.L55:
 1298              	.LBE22:
 169:Core/Src/main.c ****   {
 1299              		.loc 1 169 3 view .LVU329
 186:Core/Src/main.c ****   /* USER CODE END 3 */
 1300              		.loc 1 186 3 view .LVU330
 169:Core/Src/main.c ****   {
 1301              		.loc 1 169 9 view .LVU331
 1302 0138 FEE7     		b	.L55
 1303              	.L58:
 1304 013a 00BF     		.align	2
 1305              	.L57:
 1306 013c 00000000 		.word	cpu_freq
 1307 0140 00040240 		.word	1073873920
 1308 0144 00000000 		.word	test_values
 1309 0148 00000000 		.word	start_time
 1310 014c 00000000 		.word	width
 1311 0150 00000000 		.word	end_time
 1312 0154 00000000 		.word	time_elapsed
 1313 0158 00000000 		.word	clock_cycles
 1314 015c 00000000 		.word	num_pixels
 1315 0160 00000000 		.word	throughput
 1316 0164 00000000 		.word	place
 1317 0168 00000000 		.word	imag_dim_arr
 1318 016c 00000000 		.word	time_elapsed_arr
 1319 0170 00000000 		.word	clock_cycles_arr
 1320 0174 00000000 		.word	throughput_arr
 1321 0178 00000000 		.word	checksum_arr
 1322 017c 00000000 		.word	imag_dim
 1323 0180 00000000 		.word	height
 1324 0184 00000000 		.word	checksum
 1325              		.cfi_endproc
 1326              	.LFE134:
 1328              		.global	place
 1329              		.section	.bss.place,"aw",%nobits
 1330              		.align	2
 1333              	place:
 1334 0000 00000000 		.space	4
 1335              		.global	throughput
 1336              		.section	.bss.throughput,"aw",%nobits
 1337              		.align	3
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 51


 1340              	throughput:
 1341 0000 00000000 		.space	8
 1341      00000000 
 1342              		.global	num_pixels
 1343              		.section	.bss.num_pixels,"aw",%nobits
 1344              		.align	3
 1347              	num_pixels:
 1348 0000 00000000 		.space	8
 1348      00000000 
 1349              		.global	width
 1350              		.section	.bss.width,"aw",%nobits
 1351              		.align	2
 1354              	width:
 1355 0000 00000000 		.space	4
 1356              		.global	height
 1357              		.section	.bss.height,"aw",%nobits
 1358              		.align	2
 1361              	height:
 1362 0000 00000000 		.space	4
 1363              		.global	clock_cycles
 1364              		.section	.bss.clock_cycles,"aw",%nobits
 1365              		.align	3
 1368              	clock_cycles:
 1369 0000 00000000 		.space	8
 1369      00000000 
 1370              		.global	cpu_freq
 1371              		.section	.bss.cpu_freq,"aw",%nobits
 1372              		.align	3
 1375              	cpu_freq:
 1376 0000 00000000 		.space	8
 1376      00000000 
 1377              		.global	time_elapsed
 1378              		.section	.bss.time_elapsed,"aw",%nobits
 1379              		.align	3
 1382              	time_elapsed:
 1383 0000 00000000 		.space	8
 1383      00000000 
 1384              		.global	end_time
 1385              		.section	.bss.end_time,"aw",%nobits
 1386              		.align	3
 1389              	end_time:
 1390 0000 00000000 		.space	8
 1390      00000000 
 1391              		.global	start_time
 1392              		.section	.bss.start_time,"aw",%nobits
 1393              		.align	3
 1396              	start_time:
 1397 0000 00000000 		.space	8
 1397      00000000 
 1398              		.global	checksum_arr
 1399              		.section	.bss.checksum_arr,"aw",%nobits
 1400              		.align	3
 1403              	checksum_arr:
 1404 0000 00000000 		.space	40
 1404      00000000 
 1404      00000000 
 1404      00000000 
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 52


 1404      00000000 
 1405              		.global	throughput_arr
 1406              		.section	.bss.throughput_arr,"aw",%nobits
 1407              		.align	2
 1410              	throughput_arr:
 1411 0000 00000000 		.space	20
 1411      00000000 
 1411      00000000 
 1411      00000000 
 1411      00000000 
 1412              		.global	clock_cycles_arr
 1413              		.section	.bss.clock_cycles_arr,"aw",%nobits
 1414              		.align	3
 1417              	clock_cycles_arr:
 1418 0000 00000000 		.space	40
 1418      00000000 
 1418      00000000 
 1418      00000000 
 1418      00000000 
 1419              		.global	time_elapsed_arr
 1420              		.section	.bss.time_elapsed_arr,"aw",%nobits
 1421              		.align	3
 1424              	time_elapsed_arr:
 1425 0000 00000000 		.space	40
 1425      00000000 
 1425      00000000 
 1425      00000000 
 1425      00000000 
 1426              		.global	imag_dim_arr
 1427              		.section	.bss.imag_dim_arr,"aw",%nobits
 1428              		.align	2
 1431              	imag_dim_arr:
 1432 0000 00000000 		.space	20
 1432      00000000 
 1432      00000000 
 1432      00000000 
 1432      00000000 
 1433              		.global	test_values
 1434              		.section	.data.test_values,"aw"
 1435              		.align	2
 1438              	test_values:
 1439 0000 80000000 		.word	128
 1440 0004 A0000000 		.word	160
 1441 0008 C0000000 		.word	192
 1442 000c E0000000 		.word	224
 1443 0010 00010000 		.word	256
 1444              		.global	checksum
 1445              		.section	.bss.checksum,"aw",%nobits
 1446              		.align	3
 1449              	checksum:
 1450 0000 00000000 		.space	8
 1450      00000000 
 1451              		.global	imag_dim
 1452              		.section	.bss.imag_dim,"aw",%nobits
 1453              		.align	2
 1456              	imag_dim:
 1457 0000 00000000 		.space	4
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 53


 1458              		.text
 1459              	.Letext0:
 1460              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1461              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1462              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1463              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1464              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1465              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1466              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1467              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1468              		.file 11 "<built-in>"
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:133    .text.MX_GPIO_Init:00000074 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:143    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:149    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:454    .text.calculate_mandelbrot_fixed_point_arithmetic:00000198 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:474    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:480    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:778    .text.calculate_mandelbrot_double:00000190 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:788    .text.Error_Handler:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:794    .text.Error_Handler:00000000 Error_Handler
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:826    .text.SystemClock_Config:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:832    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:983    .text.SystemClock_Config:000000a4 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:989    .text.delay:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:995    .text.delay:00000000 delay
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1070   .text.delay:0000003c $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1076   .text.main:00000000 $t
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1082   .text.main:00000000 main
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1306   .text.main:0000013c $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1375   .bss.cpu_freq:00000000 cpu_freq
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1438   .data.test_values:00000000 test_values
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1396   .bss.start_time:00000000 start_time
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1354   .bss.width:00000000 width
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1389   .bss.end_time:00000000 end_time
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1382   .bss.time_elapsed:00000000 time_elapsed
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1368   .bss.clock_cycles:00000000 clock_cycles
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1347   .bss.num_pixels:00000000 num_pixels
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1340   .bss.throughput:00000000 throughput
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1333   .bss.place:00000000 place
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1431   .bss.imag_dim_arr:00000000 imag_dim_arr
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1424   .bss.time_elapsed_arr:00000000 time_elapsed_arr
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1417   .bss.clock_cycles_arr:00000000 clock_cycles_arr
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1410   .bss.throughput_arr:00000000 throughput_arr
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1403   .bss.checksum_arr:00000000 checksum_arr
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1456   .bss.imag_dim:00000000 imag_dim
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1361   .bss.height:00000000 height
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1449   .bss.checksum:00000000 checksum
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1330   .bss.place:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1337   .bss.throughput:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1344   .bss.num_pixels:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1351   .bss.width:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1358   .bss.height:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1365   .bss.clock_cycles:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1372   .bss.cpu_freq:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1379   .bss.time_elapsed:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1386   .bss.end_time:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1393   .bss.start_time:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1400   .bss.checksum_arr:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1407   .bss.throughput_arr:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1414   .bss.clock_cycles_arr:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1421   .bss.time_elapsed_arr:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1428   .bss.imag_dim_arr:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1435   .data.test_values:00000000 $d
C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1446   .bss.checksum:00000000 $d
ARM GAS  C:\Users\chris\AppData\Local\Temp\cc2romp8.s 			page 55


C:\Users\chris\AppData\Local\Temp\cc2romp8.s:1453   .bss.imag_dim:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2lz
__aeabi_ldivmod
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmpgt
__aeabi_dcmple
__aeabi_ul2d
__aeabi_d2ulz
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_uldivmod
HAL_Init
HAL_RCC_GetHCLKFreq
HAL_GetTick
